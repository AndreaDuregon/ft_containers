Index: List.hpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* ************************************************************************** */\n/*                                                                            */\n/*                                                        :::      ::::::::   */\n/*   List.hpp                                           :+:      :+:    :+:   */\n/*                                                    +:+ +:+         +:+     */\n/*   By: sgiovo <sgiovo@student.42.fr>              +#+  +:+       +#+        */\n/*                                                +#+#+#+#+#+   +#+           */\n/*   Created: 2021/05/14 14:56:49 by sgiovo            #+#    #+#             */\n/*   Updated: 2021/05/20 17:38:45 by sgiovo           ###   ########.fr       */\n/*                                                                            */\n/* ************************************************************************** */\n\n#pragma once\n#include \"IteratorList.hpp\"\n#include <iostream>\n#include <unistd.h>\n#include <limits>\n\nnamespace ft\n{\n\ttemplate < class T, class Allocator = std::allocator<T> > class list\n\t{\n\tprivate:\n\t\tft::Node<T>\t\t*_end;\n\t\tsize_t\t\t\t_size;\n\tpublic:\n\t\t/* MEMBER */\n\t\ttypedef T\t\t\t\t\t\t\t\tvalue_type;\n\t\ttypedef Allocator\t\t\t\t\t\tallocator_type;\n\t\ttypedef value_type&\t\t\t\t\t\treference;\n\t\ttypedef const value_type&\t\t\t\tconst_reference;\n\t\ttypedef\tvalue_type*\t\t\t\t\t\tpointer;\n\t\ttypedef\tconst value_type*\t\t\t\tconst_pointer;\n\t\ttypedef typename ft::listIterator<T>\titerator;\n\t\ttypedef typename ft::clistIterator<T>\tconst_iterator;\n\t\ttypedef\ttypename ft::rlistIterator<T>\treverse_iterator;\n\t\ttypedef\ttypename ft::rclistIterator<T>\tconst_reverse_iterator;\n\t\ttypedef std::ptrdiff_t \t\t\t\t\tdifference_type;\n\t\ttypedef size_t\t\t\t\t\t\t\tsize_type;\n\t\ttypedef void*\t\t\t\t\t\t\tCompare;\n\n\t\t//ok\n\t\tlist(/* args */) {\n\t\t\tthis->_end = new Node<T>();\n\t\t\tthis->_end->value = 0;\n\t\t\tthis->_end->next = this->_end;\n\t\t\tthis->_end->prev = this->_end;\n\t\t\tthis->_size = 0;\n\t\t};\n\t\t//ok\n\t\tlist(size_type n, const_reference val=value_type()) {\n\t\t\tthis->_end = new Node<T>();\n\t\t\tthis->_end->value = 0;\n\t\t\tthis->_end->next = this->_end;\n\t\t\tthis->_end->prev = this->_end;\n\t\t\tthis->_size = 0;\n\t\t\tfor (size_type i = 0; i < n; i++)\n\t\t\t\tthis->push_back(val);\n\t\t};\n\t\t//ok\n\t\tlist(iterator first, iterator last){\n\t\t\tthis->_end = new Node<T>();\n\t\t\tthis->_end->value = 0;\n\t\t\tthis->_end->next = this->_end;\n\t\t\tthis->_end->prev = this->_end;\n\t\t\tthis->_size = 0;\n\t\t\tfor (; first != last; ++first)\n\t\t\t\tthis->push_back(*first);\n\t\t};\n\t\t//ok\n\t\tvirtual ~list() {\n\t\t\tthis->clear();\n\t\t\tdelete this->_end;\n\t\t};\n\n\t\t//ok\n\t\titerator begin()\n\t\t{\n\t\t\treturn iterator (this->_end->next);\n\t\t};\n\t\t\n\t\tconst_iterator begin() const\n\t\t{\n\t\t\treturn const_iterator(this->_end->next);\n\t\t};\n\t\t//ok\n\t\titerator end()\n\t\t{\n\t\t\treturn iterator(this->_end);\n\t\t};\n\t\t\n\t\tconst_iterator end() const\n\t\t{\n\t\t\treturn const_iterator(this->_end);\n\t\t\t\n\t\t};\n\t\t\n\t\treverse_iterator rbegin()\n\t\t{\n\t\t\treturn reverse_iterator(this->_end->next);\n\t\t}\n\n\t\tconst_reverse_iterator rbegin() const\n\t\t{\n\t\t\treturn const_reverse_iterator(this->_end->next);\n\t\t}\n\n\t\treverse_iterator rend()\n\t\t{\n\t\t\treturn reverse_iterator(this->_end);\t\n\t\t}\n\n\t\tconst_reverse_iterator rend() const\n\t\t{\n\t\t\treturn const_reverse_iterator(this->_end);\t\n\t\t}\n\t\t\n\t\t//ok\n\t\tbool empty() const\n\t\t{\n\t\t\tif (this->_size == 0)\n\t\t\t\treturn true;\n\t\t\treturn false;\n\t\t}\n\t\t//ok\n\t\tsize_type size() const\n\t\t{\n\t\t\treturn this->_size;\n\t\t};\n\t\t//ok\n\t\tsize_type max_size() const\n\t\t{\n\t\t\treturn std::numeric_limits<size_type>::max() / (sizeof(Node<T>));\t\n\t\t};\n\t\t//ok\n\t\treference front()\n\t\t{\n\t\t\treturn this->_end->next->value;\n\t\t};\n\t\t\n\t\tconst_reference front() const\n\t\t{\n\t\t\treturn this->_end->next->value;\n\n\t\t};\n\t\t//ok\n\t\treference back()\n\t\t{\n\t\t\treturn this->_end->prev->value;\t\n\t\t};\n\n\t\tconst_reference back() const\n\t\t{\n\t\t\treturn this->_end->prev->value;\n\t\t};\n\t\t//ok\n  \t\tvoid assign (iterator first, iterator last)\n\t\t{\n\t\t\tthis->clear();\n\t\t\twhile(first != last)\n\t\t\t{\n\t\t\t\tthis->push_back(first._curr->value);\n\t\t\t\tfirst++;\n\t\t\t}\n\t\t}\n\t\t//ok\n\t\tvoid assign (size_type n, const value_type& val)\n\t\t{\n\t\t\tthis->clear();\n\t\t\tfor (size_t i = 0; i < n; i++)\n\t\t\t{\n\t\t\t\tthis->push_back(val);\n\t\t\t}\t\n\t\t}\n\t\t//ok\n\t\tvoid push_front (const value_type& val)\n\t\t{\n\t\t\tNode<T> *node = new Node<T>(val);\n\t\t\tnode->prev = this->_end;\n\t\t\tnode->next = this->_end->next;\n\t\t\tthis->_end->next->prev = node;\n\t\t\tthis->_end->next = node;\n\t\t\tthis->_size++;\n\t\t}\n\t\t//ok\n\t\tvoid pop_front()\n\t\t{\n\t\t\tif (this->_size > 0)\n\t\t\t{\n\t\t\t\tNode<T> *del = this->_end->next;\n\t\t\t\tthis->_end->next->next->prev = this->_end;\n\t\t\t\tthis->_end->next = this->_end->next->next;\n\t\t\t\tdelete del;\n\t\t\t\tthis->_size--;\n\t\t\t}\n\t\t}\n\t\t//ok\n\t\tvoid push_back (const value_type& val)\n\t\t{\n\t\t\tNode<T> *node = new Node<T>(val);\n\t\t\tnode->next = this->_end;\n\t\t\tnode->prev = this->_end->prev;\n\t\t\tthis->_end->prev->next = node;\n\t\t\tthis->_end->prev = node;\n\t\t\tthis->_size++;\n\t\t}\n\t\t//ok\n\t\tvoid pop_back()\n\t\t{\n\t\t\tif (this->_size > 0)\n\t\t\t{\n\t\t\t\tNode<T> *del = this->_end->prev;\n\t\t\t\tthis->_end->prev->prev->next = this->_end;\n\t\t\t\tthis->_end->prev = this->_end->prev->prev;\n\t\t\t\tdelete del;\n\t\t\t\tthis->_size--;\n\t\t\t}\n\t\t}\n\t\t//ok\n\t\titerator insert (iterator position, const value_type& val)\n\t\t{\n\t\t\n\t\t\tNode<T> *node  = new Node<T>(val);\n\t\t\titerator prev(position._curr);\n\n\t\t\t//prev._curr->prev->next = node;\n\t\t\tprev.operator--();\n\t\t\tprev._curr->next = node;\n\t\t\tnode->prev = prev._curr;\n\t\t\tposition._curr->prev = node;\n\t\t\tnode->next = position._curr;\n\t\t\tprev.operator++();\n\t\t\tthis->_size++;\n\t\t\treturn prev;\n\t\t}\n\t\t//ok\n\t   \tvoid insert (iterator position, size_type n, const value_type& val)\n\t\t{\n\t\t\tfor (size_type i = 0; i < n; i++)\n\t\t\t\tthis->insert(position, val);\n\t\t}\n\n\t\tvoid insert (iterator position, iterator first, iterator last)\n\t\t{\t\n\t\t\titerator workingIter(first._curr);\n\t\t\twhile(workingIter._curr != last._curr)\n\t\t\t{\n\t\t\t\tthis->insert(position, workingIter._curr->value);\n\t\t\t\tworkingIter.operator++();\n\t\t\t}\n\t\t}\n\t\t//ok\n\t\titerator erase (iterator position)\n\t\t{\n\t\t\tposition._curr->prev->next = position._curr->next;\n\t\t\tposition._curr->next->prev = position._curr->prev;\n\t\t\tdelete position._curr;\n\t\t\tthis->_size--;\n\t\t\treturn position;\n\t\t}\n\t\t//ok\n\t\titerator erase (iterator first, iterator last)\n\t\t{\n\t\t\titerator it(first._curr);\n\t\t\twhile(it != last)\n\t\t\t{\n\t\t\t\tthis->erase(it);\n\t\t\t\tit.operator++();\n\t\t\t}\n\t\t\treturn it;\n\t\t}\n\t\t\n\t\tvoid swap (ft::list<T>& x)\n\t\t{\n\t\t\tft::list<T> temp(x);\n\t\t\tx._end = this->_end;\n\t\t\tthis->_end = temp._end;\n\t\t\tsize_type n = this->_size;\n\t\t\tthis->_size = x._size;\n\t\t\tx._size = n;\n\t\t}\n\t\t//ok\n\t\tvoid resize (size_type n, value_type val = value_type())\n\t\t{\n\t\t\twhile (this->_size > n)\n\t\t\t{\n\t\t\t\tthis->pop_back();\n\t\t\t}\n\t\t\twhile (this->_size < n)\n\t\t\t{\n\t\t\t\tthis->push_back(val);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//ok\n\t\tvoid clear()\n\t\t{\n\t\t\twhile(this->begin() != this->end())\n\t\t\t{\n\t\t\t\tthis->pop_back();\n\t\t\t}\n\t\t\tthis->_size = 0;\n\t\t}\n\n\t\tvoid splice (iterator position, list& x)\n\t\t{\n\t\t\t\n\t\t}\n\t\n\t\tvoid splice (iterator position, list& x, iterator i)\n\t\t{\n\t\t\t\n\t\t}\n\n\t\tvoid splice (iterator position, list& x, iterator first, iterator last)\n\t\t{\n\t\t\t\n\t\t}\n\t\t//ok\n\t\tvoid remove (const value_type& val)\n\t\t{\n\t\t\titerator it(this->begin());\n\t\t\twhile (it != this->_end)\n            {\n\t\t\t    if (it._curr->value == val)\n                {\n\t\t\t        it._curr->next->prev = it._curr->prev;\n\t\t\t        it._curr->prev->next = it._curr->next;\n                    this->_size--;\n\t\t\t        it.operator--();\n\t\t\t        delete (it._curr->next);\n                }\n\t\t\t    it.operator++();\n            }\n\n\t\t}\n\n\t\ttemplate <class Predicate>\n\t\tvoid remove_if (Predicate pred)\n\t\t{\n\t\t\t\n\t\t}\n\t\t//ok\n\t\tvoid unique()\n\t\t{\n\t\t\titerator iter(this->begin());\n\t\t\twhile(iter != this->end())\n\t\t\t{\n\t\t\t\tif(iter._curr->value == iter._curr->next->value)\n\t\t\t\t\tthis->erase(iter);\n\t\t\t\titer.operator++();\n\t\t\t} \n\t\t}\n\t\t\n\t\ttemplate <class BinaryPredicate>\n  \t\tvoid unique (BinaryPredicate binary_pred)\n\t\t{\n\t\t\titerator iter(this->begin());\n\t\t\titer.operator++();\n\t\t\twhile(iter != this->end())\n\t\t\t{\n\t\t\t\tif(binary_pred(iter._curr->prev, iter._curr->prev->value))\n\t\t\t\t\tthis->erase(iter);\n\t\t\t\titer.operator++();\n\t\t\t} \n\t\t}\n\t\t//ok\n  \t\tvoid merge (list& x)\n\t\t{\n\t\t\t/* Node<T> tmp;\n\t\t\twhile(!x._size)\n\t\t\t{\n\t\t\t\ttmp = x.\n\t\t\t\tx.pop_front();\n\t\t\t\tthis->push_back(tmp);\n\t\t\t}\n\t\t\tthis->sort(); */\n\t\t}\n\n\t\ttemplate <class Compare>\n  \t\tvoid merge (list& x, Compare comp)\n\t\t{\n\t\t\t\n\t\t\t\n\t\t}\n\t\t//ok\n  \t\tvoid sort()\n\t\t{\n\t\t\titerator it(this->begin());\n\t\t\tT tmp;\n\t\t\tit.operator++();\n\t\t\twhile(it != this->_end)\n\t\t\t{\n\t\t\t\tif(it._curr->value < it._curr->prev->value)\n\t\t\t\t{\n\t\t\t\t\ttmp = it._curr->value;\n\t\t\t\t\tit._curr->value = it._curr->prev->value;\n\t\t\t\t\tit._curr->prev->value = tmp; \n\t\t\t\t\tit = this->begin();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tit.operator++();\n\t\t\t} \n\t\t}\n\n\t\tvoid sort (Compare comp)\n\t\t{\n\t\t\titerator it(this->begin());\n\t\t\tT tmp;\n\t\t\tit.operator++();\n\t\t\twhile(it != this->_end)\n\t\t\t{\n\t\t\t\tif(comp(it._curr->value, it._curr->prev->value))\n\t\t\t\t{\n\t\t\t\t\ttmp = it._curr->value;\n\t\t\t\t\tit._curr->value = it._curr->prev->value;\n\t\t\t\t\tit._curr->prev->value = tmp; \n\t\t\t\t\tit = this->begin();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tit.operator++();\n\t\t\t} \n\t\t}\n\t\t//ok\n\t\tvoid reverse()\n\t\t{\n\t\t\titerator it(this->begin());\n\t\t\titerator end(this->end());\n\t\t\tend.operator--();\n\t\t\tT tmp;\n\t\t\tfor (size_type i=0; i <= (this->_size/ 2); i++)\n\t\t\t{\n\t\t\t\ttmp = end._curr->value;\n\t\t\t\tend._curr->value = it._curr->value;\n\t\t\t\tit._curr->value= tmp;\n\t\t\t\tit.operator++();\n\t\t\t\tend.operator--();\n\t\t\t}\n\t\t}\n\n\t\tvoid\tprint()\n\t\t{\n\t\t\titerator it(this->begin());\n\t\t\t//nullterminato? nexfriks c entra qualcosa?\n\t\t\twhile (it != this->end())\n\t\t\t{\n\t\t\t\tstd::cout << it._curr->value << std::endl;\n\t\t\t\tit++;\n\t\t\t}\n\t\t\t//sleep(10);\n\t\t}\n\n\t};\n} \n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/List.hpp b/List.hpp
--- a/List.hpp	(revision 210233cdb0218419d7a119f1761c828a138af64c)
+++ b/List.hpp	(date 1621555953519)
@@ -141,7 +141,6 @@
 		const_reference front() const
 		{
 			return this->_end->next->value;
-
 		};
 		//ok
 		reference back()
